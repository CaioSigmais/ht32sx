<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Sigfox\Sigfox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Sigfox\Sigfox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 10 10:12:41 2020
<BR><P>
<H3>Maximum Stack Usage =        908 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; configRegion &rArr; sendFrameRCZ &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[42]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[32]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">HardFault_Handler</a><BR>
 <LI><a href="#[6e]">[Anonymous Symbol]</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">[Anonymous Symbol]</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC1_COMP_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[5e]">BSP_GetTick</a> from custom_bus.o(i.BSP_GetTick) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
 <LI><a href="#[5e]">BSP_GetTick</a> from custom_bus.o(i.BSP_GetTick) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
 <LI><a href="#[5e]">BSP_GetTick</a> from custom_bus.o(i.BSP_GetTick) referenced from iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
 <LI><a href="#[5b]">BSP_I2C1_DeInit</a> from custom_bus.o(i.BSP_I2C1_DeInit) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
 <LI><a href="#[5b]">BSP_I2C1_DeInit</a> from custom_bus.o(i.BSP_I2C1_DeInit) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
 <LI><a href="#[5b]">BSP_I2C1_DeInit</a> from custom_bus.o(i.BSP_I2C1_DeInit) referenced from iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
 <LI><a href="#[5a]">BSP_I2C1_Init</a> from custom_bus.o(i.BSP_I2C1_Init) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
 <LI><a href="#[5a]">BSP_I2C1_Init</a> from custom_bus.o(i.BSP_I2C1_Init) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
 <LI><a href="#[5a]">BSP_I2C1_Init</a> from custom_bus.o(i.BSP_I2C1_Init) referenced from iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
 <LI><a href="#[5c]">BSP_I2C1_ReadReg</a> from custom_bus.o(i.BSP_I2C1_ReadReg) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
 <LI><a href="#[5c]">BSP_I2C1_ReadReg</a> from custom_bus.o(i.BSP_I2C1_ReadReg) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
 <LI><a href="#[5c]">BSP_I2C1_ReadReg</a> from custom_bus.o(i.BSP_I2C1_ReadReg) referenced from iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
 <LI><a href="#[5d]">BSP_I2C1_WriteReg</a> from custom_bus.o(i.BSP_I2C1_WriteReg) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
 <LI><a href="#[5d]">BSP_I2C1_WriteReg</a> from custom_bus.o(i.BSP_I2C1_WriteReg) referenced from iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
 <LI><a href="#[5d]">BSP_I2C1_WriteReg</a> from custom_bus.o(i.BSP_I2C1_WriteReg) referenced from iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
 <LI><a href="#[3f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[40]">DMA1_Channel2_3_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[41]">DMA1_Channel4_5_6_7_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[3b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[3c]">EXTI2_3_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[3d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[39]">FLASH_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[32]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[48]">I2C1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[49]">I2C2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[43]">LPTIM1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[17]">LSM303AGR_ACC_DeInit</a> from lsm303agr.o(i.LSM303AGR_ACC_DeInit) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[1b]">LSM303AGR_ACC_Disable</a> from lsm303agr.o(i.LSM303AGR_ACC_Disable) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[1a]">LSM303AGR_ACC_Enable</a> from lsm303agr.o(i.LSM303AGR_ACC_Enable) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[21]">LSM303AGR_ACC_GetAxes</a> from lsm303agr.o(i.LSM303AGR_ACC_GetAxes) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[22]">LSM303AGR_ACC_GetAxesRaw</a> from lsm303agr.o(i.LSM303AGR_ACC_GetAxesRaw) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[19]">LSM303AGR_ACC_GetCapabilities</a> from lsm303agr.o(i.LSM303AGR_ACC_GetCapabilities) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[1f]">LSM303AGR_ACC_GetFullScale</a> from lsm303agr.o(i.LSM303AGR_ACC_GetFullScale) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[1d]">LSM303AGR_ACC_GetOutputDataRate</a> from lsm303agr.o(i.LSM303AGR_ACC_GetOutputDataRate) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[1c]">LSM303AGR_ACC_GetSensitivity</a> from lsm303agr.o(i.LSM303AGR_ACC_GetSensitivity) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[16]">LSM303AGR_ACC_Init</a> from lsm303agr.o(i.LSM303AGR_ACC_Init) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[18]">LSM303AGR_ACC_ReadID</a> from lsm303agr.o(i.LSM303AGR_ACC_ReadID) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[20]">LSM303AGR_ACC_SetFullScale</a> from lsm303agr.o(i.LSM303AGR_ACC_SetFullScale) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[1e]">LSM303AGR_ACC_SetOutputDataRate</a> from lsm303agr.o(i.LSM303AGR_ACC_SetOutputDataRate) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[24]">LSM303AGR_MAG_DeInit</a> from lsm303agr.o(i.LSM303AGR_MAG_DeInit) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[28]">LSM303AGR_MAG_Disable</a> from lsm303agr.o(i.LSM303AGR_MAG_Disable) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[27]">LSM303AGR_MAG_Enable</a> from lsm303agr.o(i.LSM303AGR_MAG_Enable) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[2e]">LSM303AGR_MAG_GetAxes</a> from lsm303agr.o(i.LSM303AGR_MAG_GetAxes) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[2f]">LSM303AGR_MAG_GetAxesRaw</a> from lsm303agr.o(i.LSM303AGR_MAG_GetAxesRaw) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[26]">LSM303AGR_MAG_GetCapabilities</a> from lsm303agr.o(i.LSM303AGR_MAG_GetCapabilities) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[2c]">LSM303AGR_MAG_GetFullScale</a> from lsm303agr.o(i.LSM303AGR_MAG_GetFullScale) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[2a]">LSM303AGR_MAG_GetOutputDataRate</a> from lsm303agr.o(i.LSM303AGR_MAG_GetOutputDataRate) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[29]">LSM303AGR_MAG_GetSensitivity</a> from lsm303agr.o(i.LSM303AGR_MAG_GetSensitivity) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[23]">LSM303AGR_MAG_Init</a> from lsm303agr.o(i.LSM303AGR_MAG_Init) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[25]">LSM303AGR_MAG_ReadID</a> from lsm303agr.o(i.LSM303AGR_MAG_ReadID) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[2d]">LSM303AGR_MAG_SetFullScale</a> from lsm303agr.o(i.LSM303AGR_MAG_SetFullScale) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[2b]">LSM303AGR_MAG_SetOutputDataRate</a> from lsm303agr.o(i.LSM303AGR_MAG_SetOutputDataRate) referenced 2 times from lsm303agr.o(.data)
 <LI><a href="#[5]">LSM6DSL_ACC_Disable</a> from lsm6dsl.o(i.LSM6DSL_ACC_Disable) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[4]">LSM6DSL_ACC_Enable</a> from lsm6dsl.o(i.LSM6DSL_ACC_Enable) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[b]">LSM6DSL_ACC_GetAxes</a> from lsm6dsl.o(i.LSM6DSL_ACC_GetAxes) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[c]">LSM6DSL_ACC_GetAxesRaw</a> from lsm6dsl.o(i.LSM6DSL_ACC_GetAxesRaw) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[9]">LSM6DSL_ACC_GetFullScale</a> from lsm6dsl.o(i.LSM6DSL_ACC_GetFullScale) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[7]">LSM6DSL_ACC_GetOutputDataRate</a> from lsm6dsl.o(i.LSM6DSL_ACC_GetOutputDataRate) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[6]">LSM6DSL_ACC_GetSensitivity</a> from lsm6dsl.o(i.LSM6DSL_ACC_GetSensitivity) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[a]">LSM6DSL_ACC_SetFullScale</a> from lsm6dsl.o(i.LSM6DSL_ACC_SetFullScale) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[8]">LSM6DSL_ACC_SetOutputDataRate</a> from lsm6dsl.o(i.LSM6DSL_ACC_SetOutputDataRate) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[1]">LSM6DSL_DeInit</a> from lsm6dsl.o(i.LSM6DSL_DeInit) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[e]">LSM6DSL_GYRO_Disable</a> from lsm6dsl.o(i.LSM6DSL_GYRO_Disable) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[d]">LSM6DSL_GYRO_Enable</a> from lsm6dsl.o(i.LSM6DSL_GYRO_Enable) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[14]">LSM6DSL_GYRO_GetAxes</a> from lsm6dsl.o(i.LSM6DSL_GYRO_GetAxes) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[15]">LSM6DSL_GYRO_GetAxesRaw</a> from lsm6dsl.o(i.LSM6DSL_GYRO_GetAxesRaw) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[12]">LSM6DSL_GYRO_GetFullScale</a> from lsm6dsl.o(i.LSM6DSL_GYRO_GetFullScale) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[10]">LSM6DSL_GYRO_GetOutputDataRate</a> from lsm6dsl.o(i.LSM6DSL_GYRO_GetOutputDataRate) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[f]">LSM6DSL_GYRO_GetSensitivity</a> from lsm6dsl.o(i.LSM6DSL_GYRO_GetSensitivity) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[13]">LSM6DSL_GYRO_SetFullScale</a> from lsm6dsl.o(i.LSM6DSL_GYRO_SetFullScale) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[11]">LSM6DSL_GYRO_SetOutputDataRate</a> from lsm6dsl.o(i.LSM6DSL_GYRO_SetOutputDataRate) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[3]">LSM6DSL_GetCapabilities</a> from lsm6dsl.o(i.LSM6DSL_GetCapabilities) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[0]">LSM6DSL_Init</a> from lsm6dsl.o(i.LSM6DSL_Init) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[2]">LSM6DSL_ReadID</a> from lsm6dsl.o(i.LSM6DSL_ReadID) referenced 2 times from lsm6dsl.o(.data)
 <LI><a href="#[31]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[37]">PVD_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[34]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[3a]">RCC_CRS_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[4e]">RNG_LPUART1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[5f]">ReadAccRegWrap</a> from lsm303agr.o(i.ReadAccRegWrap) referenced from lsm303agr.o(i.LSM303AGR_ACC_RegisterBusIO)
 <LI><a href="#[61]">ReadMagRegWrap</a> from lsm303agr.o(i.ReadMagRegWrap) referenced from lsm303agr.o(i.LSM303AGR_MAG_RegisterBusIO)
 <LI><a href="#[63]">ReadRegWrap</a> from lsm6dsl.o(i.ReadRegWrap) referenced from lsm6dsl.o(i.LSM6DSL_RegisterBusIO)
 <LI><a href="#[30]">Reset_Handler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[54]">SIGFOX_CALLBACK_monarch_pattern_frequency_result</a> from sigfox_callback.o(.text) referenced 2 times from sigfox_monarch_api.o(.text)
 <LI><a href="#[53]">SIGFOX_CALLBACK_monarch_scan_timeout</a> from sigfox_callback.o(.text) referenced 2 times from sigfox_monarch_api.o(.text)
 <LI><a href="#[4a]">SPI1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[57]">SPI_DMAError</a> from stm32l0xx_hal_spi.o(i.SPI_DMAError) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[58]">SPI_DMAHalfReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[55]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[59]">SPI_DMAReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[56]">SPI_DMATransmitReceiveCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[33]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[35]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[51]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l052xx.o(.text)
 <LI><a href="#[46]">TIM21_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[47]">TIM22_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[44]">TIM2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[45]">TIM6_DAC_IRQHandler</a> from stm32l0xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[3e]">TSC_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[4c]">USART1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[4d]">USART2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[4f]">USB_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[36]">WWDG_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[60]">WriteAccRegWrap</a> from lsm303agr.o(i.WriteAccRegWrap) referenced from lsm303agr.o(i.LSM303AGR_ACC_RegisterBusIO)
 <LI><a href="#[62]">WriteMagRegWrap</a> from lsm303agr.o(i.WriteMagRegWrap) referenced from lsm303agr.o(i.LSM303AGR_MAG_RegisterBusIO)
 <LI><a href="#[64]">WriteRegWrap</a> from lsm6dsl.o(i.WriteRegWrap) referenced from lsm6dsl.o(i.LSM6DSL_RegisterBusIO)
 <LI><a href="#[52]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l052xx.o(.text)
 <LI><a href="#[65]">callback</a> from monarch_app.o(i.callback) referenced from monarch_app.o(i.MonarchScan)
 <LI><a href="#[66]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[50]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(.text)
</UL>
<P><STRONG><a name="[20a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[20c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[20d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[20e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[20f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[30]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>AES128_CBC_encrypt</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion_enc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_encrypt
</UL>

<P><STRONG><a name="[7b]"></a>AES128_CBC_decrypt_internal</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, retriever_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion_dec
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
</UL>

<P><STRONG><a name="[7c]"></a>AES_CBC_decrypt_buffer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion_dec
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data_from_flash
</UL>

<P><STRONG><a name="[83]"></a>get_integrity_cksum</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retriever_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
</UL>

<P><STRONG><a name="[7d]"></a>enc_utils_retrieve_data_from_flash</STRONG> (Thumb, 346 bytes, Stack size 104 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = enc_utils_retrieve_data_from_flash &rArr; AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNVMBoardDataAddress
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[81]"></a>enc_utils_retrieve_data</STRONG> (Thumb, 318 bytes, Stack size 104 bytes, retriever_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrity_cksum
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_internal
</UL>

<P><STRONG><a name="[84]"></a>enc_utils_encrypt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[210]"></a>enc_utils_set_public_key</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retriever_api.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>enc_utils_set_test_key</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retriever_api.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>enc_utils_set_test_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retriever_api.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>enc_utils_get_id</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_device_id_and_payload_encryption_flag
</UL>

<P><STRONG><a name="[19b]"></a>enc_utils_get_initial_pac</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retriever_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_initial_pac
</UL>

<P><STRONG><a name="[85]"></a>SIGFOX_API_open</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SIGFOX_API_open &rArr; MCU_API_get_nv_mem &rArr; NVM_ReadRecord &rArr; NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_nv_mem
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id_and_payload_encryption_flag
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;St_Sigfox_Open_RCZ
</UL>

<P><STRONG><a name="[8b]"></a>SIGFOX_API_close</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIGFOX_API_close
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSigfoxLib
</UL>

<P><STRONG><a name="[8c]"></a>SIGFOX_API_send_frame</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrameRCZ
</UL>

<P><STRONG><a name="[8e]"></a>SIGFOX_API_send_bit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[8f]"></a>SIGFOX_API_send_outofband</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[90]"></a>SIGFOX_API_get_version</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_version
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_get_version
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_get_version
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>

<P><STRONG><a name="[94]"></a>SIGFOX_API_set_std_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sigfox_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SIGFOX_API_set_std_config &rArr; SIGFOX_INT_get_max_micro_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_max_micro_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;St_Sigfox_Open_RCZ
</UL>

<P><STRONG><a name="[96]"></a>SIGFOX_API_start_continuous_transmission</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>

<P><STRONG><a name="[9b]"></a>SIGFOX_API_stop_continuous_transmission</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop_continuous_transmission
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>

<P><STRONG><a name="[9d]"></a>SIGFOX_API_send_test_frame</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_store_nvm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>

<P><STRONG><a name="[a2]"></a>SIGFOX_API_receive_test_frame</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_downlink_frequency
</UL>

<P><STRONG><a name="[213]"></a>SIGFOX_API_get_info</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sigfox_api.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>SIGFOX_API_get_device_id</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id_and_payload_encryption_flag
</UL>

<P><STRONG><a name="[a7]"></a>SIGFOX_API_get_initial_pac</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sigfox_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_initial_pac
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>

<P><STRONG><a name="[214]"></a>SIGFOX_API_switch_public_key</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sigfox_api.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>SIGFOX_API_set_rc_sync_period</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sigfox_api.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>SIGFOX_MONARCH_API_reset_list_freq_pattern</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sigfox_monarch_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[ac]"></a>SIGFOX_MONARCH_API_set_list_freq_pattern</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sigfox_monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIGFOX_MONARCH_API_set_list_freq_pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
</UL>

<P><STRONG><a name="[a9]"></a>SIGFOX_MONARCH_API_execute_rc_scan</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, sigfox_monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = SIGFOX_MONARCH_API_execute_rc_scan &rArr; MONARCH_API_configure_search_pattern &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_malloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_set_list_freq_pattern
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_reset_list_freq_pattern
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonarchScan
</UL>

<P><STRONG><a name="[b0]"></a>SIGFOX_MONARCH_API_stop_rc_scan</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sigfox_monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SIGFOX_MONARCH_API_stop_rc_scan &rArr; RF_API_stop &rArr; ST_RF_API_StopRxTx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_stop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_stop_search_pattern
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
</UL>

<P><STRONG><a name="[aa]"></a>MONARCH_API_malloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, monarch_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
</UL>

<P><STRONG><a name="[b2]"></a>MONARCH_API_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, monarch_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_stop_rc_scan
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_scan_timeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[ad]"></a>MONARCH_API_timer_start</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MONARCH_API_timer_start &rArr; ST_MCU_API_GpioIRQ &rArr; S2LPIRQInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[af]"></a>MONARCH_API_timer_stop</STRONG> (Thumb, 4 bytes, Stack size 8 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MONARCH_API_timer_stop &rArr; [Anonymous Symbol] &rArr; ST_MCU_API_GpioIRQ &rArr; S2LPIRQInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_stop_rc_scan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_scan_timeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[ae]"></a>MONARCH_API_configure_search_pattern</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = MONARCH_API_configure_search_pattern &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartRx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_SetFifoLength
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[b1]"></a>MONARCH_API_stop_search_pattern</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MONARCH_API_stop_search_pattern &rArr; ST_RF_API_StopRxTx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_stop_rc_scan
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_scan_timeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[93]"></a>MONARCH_API_get_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, monarch_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_version
</UL>

<P><STRONG><a name="[bf]"></a>ST_MONARCH_API_AFTHR_GPIO_CB</STRONG> (Thumb, 842 bytes, Stack size 200 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartRx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_ReadFifoStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_ReadFifo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_GetRSSI
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_samples
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextFrequencyRequest
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HammingDist
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_S2LP_IRQ_CB
</UL>

<P><STRONG><a name="[c3]"></a>NextFrequencyRequest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
</UL>

<P><STRONG><a name="[bc]"></a>init_samples</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_samples
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HammingDist
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
</UL>

<P><STRONG><a name="[c5]"></a>SIGFOX_CALLBACK_get_rc_from_list</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, sigfox_callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIGFOX_CALLBACK_get_rc_from_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
</UL>

<P><STRONG><a name="[53]"></a>SIGFOX_CALLBACK_monarch_scan_timeout</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sigfox_callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SIGFOX_CALLBACK_monarch_scan_timeout &rArr; RF_API_stop &rArr; ST_RF_API_StopRxTx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_stop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_stop_search_pattern
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sigfox_monarch_api.o(.text)
<LI> sigfox_callback.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>SIGFOX_CALLBACK_monarch_pattern_frequency_result</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, sigfox_callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = SIGFOX_CALLBACK_monarch_pattern_frequency_result &rArr; MONARCH_API_configure_search_pattern &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_get_rc_from_list
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_stop_search_pattern
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_reset_list_freq_pattern
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sigfox_monarch_api.o(.text)
<LI> sigfox_callback.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>SIGFOX_INT_randomize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sigfox_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[95]"></a>SIGFOX_INT_get_max_micro_channel</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_INT_get_max_micro_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_set_std_config
</UL>

<P><STRONG><a name="[c6]"></a>SIGFOX_INT_get_macro_channel_index</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIGFOX_INT_get_macro_channel_index &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
</UL>

<P><STRONG><a name="[c7]"></a>SIGFOX_INT_dc_lbt_channel_pn_max</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SIGFOX_INT_dc_lbt_channel_pn_max &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[c9]"></a>SIGFOX_INT_dc_lbt_channel_pn_min</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, sigfox_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>

<P><STRONG><a name="[8a]"></a>RETURN_CODE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sigfox_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_stop_rc_scan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_close
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_scan_timeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_stop_continuous_transmission
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_start_continuous_transmission
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_test_frame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_version
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
</UL>

<P><STRONG><a name="[ca]"></a>SIGFOX_INT_compute_channels</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SIGFOX_INT_compute_channels &rArr; SIGFOX_INT_dc_lbt_channel_pn_max &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_randomize
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_PN_next_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
</UL>

<P><STRONG><a name="[dd]"></a>SIGFOX_INT_compute_carrier_sense_frequency</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sigfox_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[9f]"></a>SIGFOX_INT_store_nvm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SIGFOX_INT_store_nvm &rArr; MCU_API_set_nv_mem &rArr; NVM_WriteRecord &rArr; _writeRecordInternal &rArr; _setBlockState &rArr; NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_set_nv_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_test_frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[8d]"></a>SIGFOX_INT_execute_communication_sequence</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_store_nvm
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_outofband
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_bit
</UL>

<P><STRONG><a name="[9e]"></a>SIGFOX_INT_prepare_transmission</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SIGFOX_INT_prepare_transmission &rArr; SIGFOX_INT_build_frame &rArr; SIGFOX_INT_encrypt_decrypt_frame &rArr; MCU_API_aes_128_cbc_encrypt &rArr; enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_test_frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[d2]"></a>SIGFOX_INT_encrypt_decrypt_frame</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SIGFOX_INT_encrypt_decrypt_frame &rArr; MCU_API_aes_128_cbc_encrypt &rArr; enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_aes_128_cbc_encrypt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[d1]"></a>SIGFOX_INT_build_frame</STRONG> (Thumb, 804 bytes, Stack size 112 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SIGFOX_INT_build_frame &rArr; SIGFOX_INT_encrypt_decrypt_frame &rArr; MCU_API_aes_128_cbc_encrypt &rArr; enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_voltage_temperature
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_encrypt_decrypt_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CRC_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
</UL>

<P><STRONG><a name="[a1]"></a>SIGFOX_INT_send_single_frame</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = SIGFOX_INT_send_single_frame &rArr; RF_API_send &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_SCRAMB_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_test_frame
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[d9]"></a>SIGFOX_INT_execute_carrier_sense</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = SIGFOX_INT_execute_carrier_sense &rArr; RF_API_wait_for_clear_channel &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[ce]"></a>SIGFOX_INT_process_uplink</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = SIGFOX_INT_process_uplink &rArr; SIGFOX_INT_send_single_frame &rArr; RF_API_send &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_carrier_sense_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[cf]"></a>SIGFOX_INT_process_downlink</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[a4]"></a>SIGFOX_INT_downlink_configuration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = SIGFOX_INT_downlink_configuration &rArr; RF_API_init &rArr; priv_ST_MANUF_rx_monarch_rf_init &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_receive_test_frame
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>

<P><STRONG><a name="[a5]"></a>SIGFOX_INT_get_received_frames</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_report_test_result
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_encrypt_decrypt_frame
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_receive_test_frame
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>

<P><STRONG><a name="[a0]"></a>SIGFOX_INT_compute_uplink_frequency</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SIGFOX_INT_compute_uplink_frequency &rArr; SIGFOX_INT_get_macro_channel_index &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_macro_channel_index
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_test_frame
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[a3]"></a>SIGFOX_INT_compute_downlink_frequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sigfox_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_receive_test_frame
</UL>

<P><STRONG><a name="[88]"></a>SIGFOX_INT_get_device_id_and_payload_encryption_flag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sigfox_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIGFOX_INT_get_device_id_and_payload_encryption_flag &rArr; MCU_API_get_device_id_and_payload_encryption_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_device_id_and_payload_encryption_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_device_id
</UL>

<P><STRONG><a name="[d6]"></a>SIGFOX_CRC_crc16</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, sigfox_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_CRC_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[e7]"></a>SIGFOX_CRC_crc8</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, sigfox_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_CRC_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
</UL>

<P><STRONG><a name="[e1]"></a>SIGFOX_DECODE_decode_frame</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, sigfox_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SIGFOX_DECODE_decode_frame &rArr; MCU_API_aes_128_cbc_encrypt &rArr; enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_aes_128_cbc_encrypt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CRC_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>

<P><STRONG><a name="[d5]"></a>SIGFOX_HMAC_compute_aes</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sigfox_hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SIGFOX_HMAC_compute_aes &rArr; MCU_API_aes_128_cbc_encrypt &rArr; enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_aes_128_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[cc]"></a>SIGFOX_PN_next_pn</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, sigfox_pn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIGFOX_PN_next_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[d7]"></a>SIGFOX_SCRAMB_compute</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sigfox_scramb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIGFOX_SCRAMB_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersFindFactors
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_macro_channel_index
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_min
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxesRaw
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_rf_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_monarch_rf_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_rf_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_monarch_rf_init
</UL>

<P><STRONG><a name="[216]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[217]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data_from_flash
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;St_Sigfox_Open_RCZ
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_internal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_encrypt_decrypt_frame
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_SCRAMB_compute
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data_from_flash
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetAxes
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetAxes
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetAxes
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxes
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetAxes
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetAxes
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetAxes
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxes
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetAxes
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetAxes
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetAxes
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxes
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[21c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[f0]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[21e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>BSP_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, custom_bus.o(i.BSP_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
</UL>
<P><STRONG><a name="[5b]"></a>BSP_I2C1_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, custom_bus.o(i.BSP_I2C1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_I2C1_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
</UL>
<P><STRONG><a name="[5a]"></a>BSP_I2C1_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, custom_bus.o(i.BSP_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_I2C1_Init &rArr; MX_I2C1_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
</UL>
<P><STRONG><a name="[5c]"></a>BSP_I2C1_ReadReg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, custom_bus.o(i.BSP_I2C1_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
</UL>
<P><STRONG><a name="[5d]"></a>BSP_I2C1_WriteReg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, custom_bus.o(i.BSP_I2C1_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe)
<LI> iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe)
</UL>
<P><STRONG><a name="[fc]"></a>Configure_RTC_Clock</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, rtc.o(i.Configure_RTC_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[40]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>DataEepromErase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdk_utils_flash.o(i.DataEepromErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DataEepromErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAllSector
</UL>

<P><STRONG><a name="[3b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EepromRead</STRONG> (Thumb, 92 bytes, Stack size 288 bytes, s2lp_aux_eeprom.o(i.EepromRead), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSLow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data
</UL>

<P><STRONG><a name="[10c]"></a>EepromSPICSHigh</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, s2lp_aux_eeprom.o(i.EepromSPICSHigh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetDaughterBoardType
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[10a]"></a>EepromSPICSLow</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, s2lp_aux_eeprom.o(i.EepromSPICSLow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetDaughterBoardType
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[109]"></a>EepromWaitEndWriteOperation</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, s2lp_aux_eeprom.o(i.EepromWaitEndWriteOperation), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSLow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[144]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM22_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[10f]"></a>FEM_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, s2lp_aux_fem_auto.o(i.FEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FEM_Init &rArr; S2LPSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiWriteRegisters
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALeveldBm
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetPALevelMaxIndex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_gpio_tx_rx_pin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_gpio_tx_pin
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_gpio_rx_pin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementGetRangeExtender
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Operation
</UL>

<P><STRONG><a name="[117]"></a>FEM_Operation</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, s2lp_aux_fem_auto.o(i.FEM_Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FEM_Operation &rArr; FEM_Init &rArr; S2LPSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartTx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartRx
</UL>

<P><STRONG><a name="[118]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
</UL>

<P><STRONG><a name="[11a]"></a>FlashErase</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdk_utils_flash.o(i.FlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[11b]"></a>FlashRead</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sdk_utils_flash.o(i.FlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Read
</UL>

<P><STRONG><a name="[11c]"></a>FlashWrite</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, sdk_utils_flash.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumberOfPagesByBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Write
</UL>

<P><STRONG><a name="[7e]"></a>GetNVMBoardDataAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvm_api.o(i.GetNVMBoardDataAddress))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data_from_flash
</UL>

<P><STRONG><a name="[102]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiWriteRegisters
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
</UL>

<P><STRONG><a name="[11f]"></a>HAL_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[120]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>

<P><STRONG><a name="[122]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
</UL>

<P><STRONG><a name="[105]"></a>HAL_FLASHEx_DATAEEPROM_Erase</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEepromErase
</UL>

<P><STRONG><a name="[106]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEepromErase
</UL>

<P><STRONG><a name="[11e]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[104]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEepromErase
</UL>

<P><STRONG><a name="[107]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEepromErase
</UL>

<P><STRONG><a name="[f3]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[123]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_S2LP_IRQ_CB
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ACC_exti
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQEnable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownEnter
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiWriteRegisters
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSLow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSHigh
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[f8]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[fa]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[f5]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[fb]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
</UL>

<P><STRONG><a name="[127]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[129]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[130]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>HAL_InitTick</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQEnable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
</UL>

<P><STRONG><a name="[101]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQEnable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
</UL>

<P><STRONG><a name="[100]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQEnable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fd]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[135]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[136]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1158 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[137]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_DeactivateWakeUpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
</UL>

<P><STRONG><a name="[138]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[13a]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_RTC_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[1db]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiWriteRegisters
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
</UL>

<P><STRONG><a name="[142]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[10b]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWaitEndWriteOperation
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[146]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiWriteRegisters
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
</UL>

<P><STRONG><a name="[147]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_TxRxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiRawTC
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[1de]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[133]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32l0xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM22_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM22_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
</UL>

<P><STRONG><a name="[14a]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM22_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[158]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_UART_MspInit</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[32]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iks01a2_motion_sensors_ex.o(i.IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection &rArr; LSM6DSL_ACC_Disable_Wake_Up_Detection &rArr; lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ACC_exti
</UL>

<P><STRONG><a name="[201]"></a>IKS01A2_MOTION_SENSOR_Enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iks01a2_motion_sensors.o(i.IKS01A2_MOTION_SENSOR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IKS01A2_MOTION_SENSOR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>IKS01A2_MOTION_SENSOR_Enable_Wake_Up_Detection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iks01a2_motion_sensors_ex.o(i.IKS01A2_MOTION_SENSOR_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IKS01A2_MOTION_SENSOR_Enable_Wake_Up_Detection &rArr; LSM6DSL_ACC_Enable_Wake_Up_Detection &rArr; lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>IKS01A2_MOTION_SENSOR_Init</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, iks01a2_motion_sensors.o(i.IKS01A2_MOTION_SENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IKS01A2_MOTION_SENSOR_Init &rArr; LSM6DSL_0_Probe &rArr; LSM6DSL_RegisterBusIO &rArr; LSM6DSL_Write_Reg &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_0_Probe
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_0_Probe
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_0_Probe
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>LSM303AGR_ACC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_ACC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM303AGR_ACC_DeInit &rArr; LSM303AGR_ACC_Disable &rArr; lsm303agr_xl_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LSM303AGR_ACC_Disable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_ACC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_ACC_Disable &rArr; lsm303agr_xl_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>LSM303AGR_ACC_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_ACC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303AGR_ACC_Enable &rArr; lsm303agr_xl_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LSM303AGR_ACC_GetAxes</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lsm303agr.o(i.LSM303AGR_ACC_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_GetAxes &rArr; LSM303AGR_ACC_GetAxesRaw &rArr; lsm303agr_xl_operating_mode_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetSensitivity
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxesRaw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LSM303AGR_ACC_GetAxesRaw</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lsm303agr.o(i.LSM303AGR_ACC_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM303AGR_ACC_GetAxesRaw &rArr; lsm303agr_xl_operating_mode_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_operating_mode_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_acceleration_raw_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>LSM303AGR_ACC_GetCapabilities</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lsm303agr.o(i.LSM303AGR_ACC_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LSM303AGR_ACC_GetFullScale</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_ACC_GetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_ACC_GetFullScale &rArr; lsm303agr_xl_full_scale_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LSM303AGR_ACC_GetOutputDataRate</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, lsm303agr.o(i.LSM303AGR_ACC_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LSM303AGR_ACC_GetOutputDataRate &rArr; lsm303agr_xl_operating_mode_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_operating_mode_get
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LSM303AGR_ACC_GetSensitivity</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lsm303agr.o(i.LSM303AGR_ACC_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LSM303AGR_ACC_GetSensitivity &rArr; lsm303agr_xl_operating_mode_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_operating_mode_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LSM303AGR_ACC_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_ACC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_ACC_Init &rArr; lsm303agr_xl_full_scale_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_fifo_mode_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_block_data_update_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>LSM303AGR_ACC_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_ACC_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM303AGR_ACC_ReadID &rArr; lsm303agr_xl_device_id_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>LSM303AGR_ACC_RegisterBusIO</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_ACC_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_ACC_RegisterBusIO &rArr; LSM303AGR_ACC_Write_Reg &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_0_Probe
</UL>

<P><STRONG><a name="[20]"></a>LSM303AGR_ACC_SetFullScale</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_ACC_SetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303AGR_ACC_SetFullScale &rArr; lsm303agr_xl_full_scale_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LSM303AGR_ACC_SetOutputDataRate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lsm303agr.o(i.LSM303AGR_ACC_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM303AGR_ACC_SetOutputDataRate &rArr; lsm303agr_xl_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>LSM303AGR_ACC_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_ACC_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM303AGR_ACC_Write_Reg &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_RegisterBusIO
</UL>

<P><STRONG><a name="[24]"></a>LSM303AGR_MAG_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_MAG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_MAG_DeInit &rArr; LSM303AGR_MAG_Disable &rArr; lsm303agr_mag_operating_mode_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LSM303AGR_MAG_Disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_MAG_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303AGR_MAG_Disable &rArr; lsm303agr_mag_operating_mode_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_operating_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LSM303AGR_MAG_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_MAG_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303AGR_MAG_Enable &rArr; lsm303agr_mag_operating_mode_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_operating_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LSM303AGR_MAG_GetAxes</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lsm303agr.o(i.LSM303AGR_MAG_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LSM303AGR_MAG_GetAxes &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_magnetic_raw_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LSM303AGR_MAG_GetAxesRaw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_MAG_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303AGR_MAG_GetAxesRaw &rArr; lsm303agr_magnetic_raw_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_magnetic_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LSM303AGR_MAG_GetCapabilities</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lsm303agr.o(i.LSM303AGR_MAG_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LSM303AGR_MAG_GetFullScale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm303agr.o(i.LSM303AGR_MAG_GetFullScale))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LSM303AGR_MAG_GetOutputDataRate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_MAG_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_MAG_GetOutputDataRate &rArr; lsm303agr_mag_data_rate_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LSM303AGR_MAG_GetSensitivity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm303agr.o(i.LSM303AGR_MAG_GetSensitivity))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LSM303AGR_MAG_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_MAG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_MAG_Init &rArr; lsm303agr_mag_self_test_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_self_test_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_operating_mode_set
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_data_rate_set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_block_data_update_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LSM303AGR_MAG_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_MAG_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM303AGR_MAG_ReadID &rArr; lsm303agr_mag_device_id_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>LSM303AGR_MAG_RegisterBusIO</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm303agr.o(i.LSM303AGR_MAG_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM303AGR_MAG_RegisterBusIO &rArr; lsm303agr_mag_i2c_interface_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_i2c_interface_set
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_0_Probe
</UL>

<P><STRONG><a name="[2d]"></a>LSM303AGR_MAG_SetFullScale</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr.o(i.LSM303AGR_MAG_SetFullScale))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LSM303AGR_MAG_SetOutputDataRate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm303agr.o(i.LSM303AGR_MAG_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303AGR_MAG_SetOutputDataRate &rArr; lsm303agr_mag_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>LSM6DSL_ACC_Disable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_ACC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_ACC_Disable &rArr; lsm6dsl_xl_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[162]"></a>LSM6DSL_ACC_Disable_Wake_Up_Detection</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsm6dsl.o(i.LSM6DSL_ACC_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM6DSL_ACC_Disable_Wake_Up_Detection &rArr; lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_dur_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_get
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[4]"></a>LSM6DSL_ACC_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_ACC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_ACC_Enable &rArr; lsm6dsl_xl_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[164]"></a>LSM6DSL_ACC_Enable_Wake_Up_Detection</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lsm6dsl.o(i.LSM6DSL_ACC_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LSM6DSL_ACC_Enable_Wake_Up_Detection &rArr; lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_SetOutputDataRate
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_SetFullScale
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_dur_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_get
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Enable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[b]"></a>LSM6DSL_ACC_GetAxes</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lsm6dsl.o(i.LSM6DSL_ACC_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM6DSL_ACC_GetAxes &rArr; LSM6DSL_ACC_GetSensitivity &rArr; lsm6dsl_xl_full_scale_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetSensitivity
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_acceleration_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>LSM6DSL_ACC_GetAxesRaw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_ACC_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_ACC_GetAxesRaw &rArr; lsm6dsl_acceleration_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_acceleration_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>LSM6DSL_ACC_GetFullScale</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_ACC_GetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_ACC_GetFullScale &rArr; lsm6dsl_xl_full_scale_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LSM6DSL_ACC_GetOutputDataRate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_ACC_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_ACC_GetOutputDataRate &rArr; lsm6dsl_xl_data_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LSM6DSL_ACC_GetSensitivity</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_ACC_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_ACC_GetSensitivity &rArr; lsm6dsl_xl_full_scale_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>LSM6DSL_ACC_SetFullScale</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_ACC_SetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_ACC_SetFullScale &rArr; lsm6dsl_xl_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>LSM6DSL_ACC_SetOutputDataRate</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_ACC_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_ACC_SetOutputDataRate &rArr; LSM6DSL_ACC_SetOutputDataRate_When_Enabled &rArr; lsm6dsl_xl_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_SetOutputDataRate_When_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>LSM6DSL_DeInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LSM6DSL_DeInit &rArr; LSM6DSL_GYRO_Disable &rArr; lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_Disable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>LSM6DSL_GYRO_Disable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_GYRO_Disable &rArr; lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LSM6DSL_GYRO_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_GYRO_Enable &rArr; lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LSM6DSL_GYRO_GetAxes</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM6DSL_GYRO_GetAxes &rArr; LSM6DSL_GYRO_GetSensitivity &rArr; lsm6dsl_gy_full_scale_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetSensitivity
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_angular_rate_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>LSM6DSL_GYRO_GetAxesRaw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_GYRO_GetAxesRaw &rArr; lsm6dsl_angular_rate_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_angular_rate_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>LSM6DSL_GYRO_GetFullScale</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_GetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_GYRO_GetFullScale &rArr; lsm6dsl_gy_full_scale_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LSM6DSL_GYRO_GetOutputDataRate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_GYRO_GetOutputDataRate &rArr; lsm6dsl_gy_data_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LSM6DSL_GYRO_GetSensitivity</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_GYRO_GetSensitivity &rArr; lsm6dsl_gy_full_scale_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LSM6DSL_GYRO_SetFullScale</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_SetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_GYRO_SetFullScale &rArr; lsm6dsl_gy_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LSM6DSL_GYRO_SetOutputDataRate</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_GYRO_SetOutputDataRate &rArr; LSM6DSL_GYRO_SetOutputDataRate_When_Enabled &rArr; lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_SetOutputDataRate_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>LSM6DSL_GetCapabilities</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lsm6dsl.o(i.LSM6DSL_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>LSM6DSL_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lsm6dsl.o(i.LSM6DSL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM6DSL_Init &rArr; lsm6dsl_xl_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_mode_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_auto_increment_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>LSM6DSL_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSL_ReadID &rArr; lsm6dsl_device_id_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_0_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data)
</UL>
<P><STRONG><a name="[180]"></a>LSM6DSL_RegisterBusIO</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSL_RegisterBusIO &rArr; LSM6DSL_Write_Reg &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_0_Probe
</UL>

<P><STRONG><a name="[197]"></a>LSM6DSL_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lsm6dsl.o(i.LSM6DSL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSL_Write_Reg &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_RegisterBusIO
</UL>

<P><STRONG><a name="[d3]"></a>MCU_API_aes_128_cbc_encrypt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, mcu_api_stm32.o(i.MCU_API_aes_128_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCU_API_aes_128_cbc_encrypt &rArr; enc_utils_encrypt &rArr; AES128_CBC_encrypt &rArr; KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_encrypt_decrypt_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
</UL>

<P><STRONG><a name="[d0]"></a>MCU_API_delay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mcu_api_stm32.o(i.MCU_API_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCU_API_delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_get_ramp_duration
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[89]"></a>MCU_API_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api_stm32.o(i.MCU_API_free))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_close
</UL>

<P><STRONG><a name="[e5]"></a>MCU_API_get_device_id_and_payload_encryption_flag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_api_stm32.o(i.MCU_API_get_device_id_and_payload_encryption_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCU_API_get_device_id_and_payload_encryption_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_get_id
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id_and_payload_encryption_flag
</UL>

<P><STRONG><a name="[a8]"></a>MCU_API_get_initial_pac</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu_api_stm32.o(i.MCU_API_get_initial_pac), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_get_initial_pac
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
</UL>

<P><STRONG><a name="[86]"></a>MCU_API_get_nv_mem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu_api_stm32.o(i.MCU_API_get_nv_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCU_API_get_nv_mem &rArr; NVM_ReadRecord &rArr; NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_ReadRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[91]"></a>MCU_API_get_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu_api_stm32.o(i.MCU_API_get_version), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_version
</UL>

<P><STRONG><a name="[d4]"></a>MCU_API_get_voltage_temperature</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu_api_stm32.o(i.MCU_API_get_voltage_temperature))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[87]"></a>MCU_API_malloc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_api_stm32.o(i.MCU_API_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[e3]"></a>MCU_API_report_test_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api_stm32.o(i.MCU_API_report_test_result))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>

<P><STRONG><a name="[cd]"></a>MCU_API_set_nv_mem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu_api_stm32.o(i.MCU_API_set_nv_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCU_API_set_nv_mem &rArr; NVM_WriteRecord &rArr; _writeRecordInternal &rArr; _setBlockState &rArr; NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_WriteRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_store_nvm
</UL>

<P><STRONG><a name="[db]"></a>MCU_API_timer_start</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tim.o(i.MCU_API_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MCU_API_timer_start &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcIrqFlag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseFlag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNextRtcWakeUpFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcPrescFlag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_Timer_CB
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[dc]"></a>MCU_API_timer_start_carrier_sense</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tim.o(i.MCU_API_timer_start_carrier_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MCU_API_timer_start_carrier_sense &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseForCsFlag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseFlag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNextRtcWakeUpFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcPrescFlag
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcInUseFlag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersFindFactors
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[e2]"></a>MCU_API_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim.o(i.MCU_API_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCU_API_timer_stop &rArr; HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseFlag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>

<P><STRONG><a name="[df]"></a>MCU_API_timer_stop_carrier_sense</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tim.o(i.MCU_API_timer_stop_carrier_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCU_API_timer_stop_carrier_sense &rArr; HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseForCsFlag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseFlag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcInUseForCsFlag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[de]"></a>MCU_API_timer_wait_for_end</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tim.o(i.MCU_API_timer_wait_for_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = MCU_API_timer_wait_for_end &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcIrqFlag
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcIrqFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>

<P><STRONG><a name="[1ad]"></a>MCU_Config</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, main.o(i.MCU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MCU_Config &rArr; ST_Sigfox_Init &rArr; St_Sigfox_Open_RCZ &rArr; SIGFOX_API_open &rArr; MCU_API_get_nv_mem &rArr; NVM_ReadRecord &rArr; NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_freq_offset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_xtal_freq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_rssi_offset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_lbt_thr_offset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>MX_DMA_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>MX_GPIO_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>MX_I2C1_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, custom_bus.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[200]"></a>MX_MEMS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_x-cube-mems1.o(i.MX_MEMS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>MX_MEMS_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_x-cube-mems1.o(i.MX_MEMS_Process))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>MX_RTC_Init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>MX_SPI1_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>MX_TIM22_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tim.o(i.MX_TIM22_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_TIM22_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>MX_TIM6_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>MonarchScan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, monarch_app.o(i.MonarchScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = MonarchScan &rArr; SIGFOX_MONARCH_API_execute_rc_scan &rArr; MONARCH_API_configure_search_pattern &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>NVM_Read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nvm_api.o(i.NVM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data_from_flash
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_WriteRecord
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_ReadRecord
</UL>

<P><STRONG><a name="[19c]"></a>NVM_ReadRecord</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nvm_api.o(i.NVM_ReadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NVM_ReadRecord &rArr; NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNVMInitial
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_nv_mem
</UL>

<P><STRONG><a name="[1c0]"></a>NVM_Write</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nvm_api.o(i.NVM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeRecordInternal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setBlockState
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_WriteRecord
</UL>

<P><STRONG><a name="[19d]"></a>NVM_WriteRecord</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nvm_api.o(i.NVM_WriteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NVM_WriteRecord &rArr; _writeRecordInternal &rArr; _setBlockState &rArr; NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeRecordInternal
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAllSector
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNVMInitial
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_set_nv_mem
</UL>

<P><STRONG><a name="[34]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>RF_API_change_frequency</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, rf_api.o(i.RF_API_change_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextFrequencyRequest
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_start_continuous_transmission
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
</UL>

<P><STRONG><a name="[92]"></a>RF_API_get_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_api.o(i.RF_API_get_version), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_version
</UL>

<P><STRONG><a name="[97]"></a>RF_API_init</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, rf_api.o(i.RF_API_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = RF_API_init &rArr; priv_ST_MANUF_rx_monarch_rf_init &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_Shutdown
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_custom_setting
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_rf_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_monarch_rf_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_start_continuous_transmission
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
</UL>

<P><STRONG><a name="[d8]"></a>RF_API_send</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rf_api.o(i.RF_API_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = RF_API_send &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartTx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rf_load_first_ramp_up
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
</UL>

<P><STRONG><a name="[99]"></a>RF_API_start_continuous_transmission</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rf_api.o(i.RF_API_start_continuous_transmission), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartTx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rf_load_first_ramp_up
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_start_continuous_transmission
</UL>

<P><STRONG><a name="[9a]"></a>RF_API_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rf_api.o(i.RF_API_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RF_API_stop &rArr; ST_RF_API_StopRxTx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_Shutdown
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_stop_rc_scan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_execute_rc_scan
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_scan_timeout
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_CALLBACK_monarch_pattern_frequency_result
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_stop_continuous_transmission
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_start_continuous_transmission
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
</UL>

<P><STRONG><a name="[9c]"></a>RF_API_stop_continuous_transmission</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_api.o(i.RF_API_stop_continuous_transmission), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_stop_continuous_transmission
</UL>

<P><STRONG><a name="[da]"></a>RF_API_wait_for_clear_channel</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, rf_api.o(i.RF_API_wait_for_clear_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = RF_API_wait_for_clear_channel &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_Shutdown
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartRx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
</UL>

<P><STRONG><a name="[e0]"></a>RF_API_wait_frame</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, rf_api.o(i.RF_API_wait_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartRx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>

<P><STRONG><a name="[140]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[13d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RTC_IRQHandler &rArr; MCU_API_timer_start &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcIrqFlag
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseForCsFlag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcInUseFlag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcInUseForCsFlag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextRtcWakeUpFlag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_Timer_Channel_Clear_CB
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_Timer_CB
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNIntermediateTimIrqFlag
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNotifyEndFlag
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNIntermediateTimIrqFlag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1ee]"></a>S2LPGetSpiInUse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.S2LPGetSpiInUse))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_S2LP_IRQ_CB
</UL>

<P><STRONG><a name="[1d4]"></a>S2LPIRQEnable</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gpio.o(i.S2LPIRQEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = S2LPIRQEnable &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[1d6]"></a>S2LPIRQInit</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, gpio.o(i.S2LPIRQInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = S2LPIRQInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[110]"></a>S2LPManagementGetRangeExtender</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_aux_utils.o(i.S2LPManagementGetRangeExtender))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>

<P><STRONG><a name="[1f0]"></a>S2LPManagementGetXtalFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_aux_utils.o(i.S2LPManagementGetXtalFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[1e3]"></a>S2LPManagementSetBand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_aux_utils.o(i.S2LPManagementSetBand))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[1e4]"></a>S2LPManagementSetRangeExtender</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_aux_utils.o(i.S2LPManagementSetRangeExtender))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[115]"></a>S2LPRadioSetPALevelMaxIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s2lp_aux_fem_auto.o(i.S2LPRadioSetPALevelMaxIndex))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>

<P><STRONG><a name="[116]"></a>S2LPRadioSetPALeveldBm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s2lp_aux_fem_auto.o(i.S2LPRadioSetPALeveldBm))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>

<P><STRONG><a name="[1e2]"></a>S2LPRadioSetXtalFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_aux_utils.o(i.S2LPRadioSetXtalFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[1d7]"></a>S2LPShutdownEnter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.S2LPShutdownEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S2LPShutdownEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_Shutdown
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownInit
</UL>

<P><STRONG><a name="[1d8]"></a>S2LPShutdownExit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(i.S2LPShutdownExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S2LPShutdownExit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_Shutdown
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[1d9]"></a>S2LPShutdownInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gpio.o(i.S2LPShutdownInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = S2LPShutdownInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[1da]"></a>S2LPSpiRaw</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, spi.o(i.S2LPSpiRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_SpiRaw
</UL>

<P><STRONG><a name="[111]"></a>S2LPSpiWriteRegisters</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, spi.o(i.S2LPSpiWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = S2LPSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Operation
</UL>

<P><STRONG><a name="[1ae]"></a>ST_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.ST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ST_Init &rArr; FEM_Init &rArr; S2LPSpiWriteRegisters &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownExit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPRadioSetXtalFrequency
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementSetRangeExtender
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementSetBand
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQEnable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[b9]"></a>ST_MCU_API_GpioIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio.o(i.ST_MCU_API_GpioIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ST_MCU_API_GpioIRQ &rArr; S2LPIRQInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPIRQEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop_continuous_transmission
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rf_load_first_ramp_up
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1c6]"></a>ST_MCU_API_Shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.ST_MCU_API_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST_MCU_API_Shutdown &rArr; S2LPShutdownEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownEnter
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPShutdownExit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[1e5]"></a>ST_MCU_API_SpiRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(i.ST_MCU_API_SpiRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPSpiRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_SpiRaw_Ramp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>

<P><STRONG><a name="[1b1]"></a>ST_MCU_API_TimerCalibration</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, tim.o(i.ST_MCU_API_TimerCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ST_MCU_API_TimerCalibration &rArr; Configure_RTC_Clock &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcPrescFlag
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcIrqFlag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNextRtcWakeUpFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcPrescFlag
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcIrqFlag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRtcHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RTC_Clock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalTimersTimConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[1ab]"></a>ST_MCU_API_WaitForInterrupt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.ST_MCU_API_WaitForInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_S2LP_IRQ_CB
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setS2lpIrqRaisedFlag
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getS2lpIrqRaisedFlag
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLowPowerFlag
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
</UL>

<P><STRONG><a name="[c0]"></a>ST_RF_API_GetRSSI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_GetRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ST_RF_API_GetRSSI &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
</UL>

<P><STRONG><a name="[125]"></a>ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[c2]"></a>ST_RF_API_ReadFifo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ST_RF_API_ReadFifo &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
</UL>

<P><STRONG><a name="[c1]"></a>ST_RF_API_ReadFifoStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_ReadFifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ST_RF_API_ReadFifoStatus &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
</UL>

<P><STRONG><a name="[126]"></a>ST_RF_API_S2LP_IRQ_CB</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_S2LP_IRQ_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPGetSpiInUse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>

<P><STRONG><a name="[bb]"></a>ST_RF_API_SetFifoLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_SetFifoLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ST_RF_API_SetFifoLength &rArr; priv_ST_MANUF_WriteRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
</UL>

<P><STRONG><a name="[bd]"></a>ST_RF_API_StartRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ST_RF_API_StartRx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Operation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_configure_search_pattern
</UL>

<P><STRONG><a name="[1cd]"></a>ST_RF_API_StartTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ST_RF_API_StartTx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Operation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
</UL>

<P><STRONG><a name="[be]"></a>ST_RF_API_StopRxTx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_api.o(i.ST_RF_API_StopRxTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ST_RF_API_StopRxTx &rArr; priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Operation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop_continuous_transmission
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_stop_search_pattern
</UL>

<P><STRONG><a name="[19e]"></a>ST_RF_API_Timer_CB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_Timer_CB))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[1d3]"></a>ST_RF_API_Timer_Channel_Clear_CB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_Timer_Channel_Clear_CB))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>ST_RF_API_custom_setting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_custom_setting))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[199]"></a>ST_RF_API_get_ramp_duration</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_get_ramp_duration))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
</UL>

<P><STRONG><a name="[113]"></a>ST_RF_API_gpio_rx_pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_gpio_rx_pin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>

<P><STRONG><a name="[114]"></a>ST_RF_API_gpio_tx_pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_gpio_tx_pin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>

<P><STRONG><a name="[112]"></a>ST_RF_API_gpio_tx_rx_pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_gpio_tx_rx_pin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEM_Init
</UL>

<P><STRONG><a name="[1fb]"></a>ST_RF_API_reduce_output_power</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_reduce_output_power))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
</UL>

<P><STRONG><a name="[1b3]"></a>ST_RF_API_set_freq_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_set_freq_offset))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[1b5]"></a>ST_RF_API_set_lbt_thr_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_set_lbt_thr_offset))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[1b4]"></a>ST_RF_API_set_rssi_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_set_rssi_offset))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[1b2]"></a>ST_RF_API_set_xtal_freq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_api.o(i.ST_RF_API_set_xtal_freq))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[1af]"></a>ST_Sigfox_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, st_sigfox_init.o(i.ST_Sigfox_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST_Sigfox_Init &rArr; St_Sigfox_Open_RCZ &rArr; SIGFOX_API_open &rArr; MCU_API_get_nv_mem &rArr; NVM_ReadRecord &rArr; NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_utils_retrieve_data_from_flash
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNVMInitial
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_xtal_freq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_rssi_offset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_set_lbt_thr_offset
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2LPManagementGetXtalFrequency
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;St_Sigfox_Open_RCZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[33]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>SdkEvalGetDaughterBoardType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s2lp_aux_utils.o(i.SdkEvalGetDaughterBoardType), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSLow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromSPICSHigh
</UL>

<P><STRONG><a name="[148]"></a>SdkEvalSpiRawTC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi.o(i.SdkEvalSpiRawTC))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
</UL>

<P><STRONG><a name="[1a5]"></a>SdkEvalTimersFindFactors</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tim.o(i.SdkEvalTimersFindFactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SdkEvalTimersFindFactors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
</UL>

<P><STRONG><a name="[1a6]"></a>SdkEvalTimersTimConfig</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tim.o(i.SdkEvalTimersTimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SdkEvalTimersTimConfig &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
</UL>

<P><STRONG><a name="[1f1]"></a>SetNVMInitial</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nvm_api.o(i.SetNVMInitial))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SetNVMInitial &rArr; NVM_WriteRecord &rArr; _writeRecordInternal &rArr; _setBlockState &rArr; NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAllSector
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_WriteRecord
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_ReadRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[1f2]"></a>St_Sigfox_Open_RCZ</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, st_sigfox_init.o(i.St_Sigfox_Open_RCZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = St_Sigfox_Open_RCZ &rArr; SIGFOX_API_open &rArr; MCU_API_get_nv_mem &rArr; NVM_ReadRecord &rArr; NVM_Read &rArr; FlashRead &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_set_std_config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sigfox_Init
</UL>

<P><STRONG><a name="[35]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>SystemClock_Config</STRONG> (Thumb, 110 bytes, Stack size 120 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>

<P><STRONG><a name="[51]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15c]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15a]"></a>UART_SetConfig</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1f6]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[221]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[1b0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonarchScan
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrameRCZ
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSigfoxLib
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback
</UL>

<P><STRONG><a name="[1c3]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rf_api.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_rf_init
</UL>

<P><STRONG><a name="[170]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st_sigfox_init.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;St_Sigfox_Open_RCZ
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetSensitivity
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetOutputDataRate
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetFullScale
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetOutputDataRate
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetOutputDataRate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_get
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_get
</UL>

<P><STRONG><a name="[222]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[223]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[224]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[65]"></a>callback</STRONG> (Thumb, 1404 bytes, Stack size 16 bytes, monarch_app.o(i.callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monarch_app.o(i.MonarchScan)
</UL>
<P><STRONG><a name="[1f9]"></a>closeSigfoxLib</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, monarch_app.o(i.closeSigfoxLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = closeSigfoxLib &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_close
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
</UL>

<P><STRONG><a name="[1fa]"></a>configRegion</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, monarch_app.o(i.configRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = configRegion &rArr; sendFrameRCZ &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;St_Sigfox_Open_RCZ
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_reduce_output_power
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_MONARCH_API_stop_rc_scan
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFrameRCZ
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSigfoxLib
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>eraseAllSector</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nvm_api.o(i.eraseAllSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eraseAllSector &rArr; DataEepromErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEepromErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNVMInitial
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_WriteRecord
</UL>

<P><STRONG><a name="[66]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[1e9]"></a>getLowPowerFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.getLowPowerFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>

<P><STRONG><a name="[1d0]"></a>getNIntermediateTimIrqFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(i.getNIntermediateTimIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>getNextRtcWakeUpFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.getNextRtcWakeUpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>getNotifyEndFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(i.getNotifyEndFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>getRtcHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(i.getRtcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[1a4]"></a>getRtcInUseFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.getRtcInUseFlag))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
</UL>

<P><STRONG><a name="[1a9]"></a>getRtcInUseForCsFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.getRtcInUseForCsFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
</UL>

<P><STRONG><a name="[1ac]"></a>getRtcIrqFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.getRtcIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
</UL>

<P><STRONG><a name="[1a2]"></a>getRtcPrescFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.getRtcPrescFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[1ec]"></a>getS2lpIrqRaisedFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.getS2lpIrqRaisedFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>

<P><STRONG><a name="[205]"></a>getScanStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, monarch_app.o(i.getScanStatus))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>handle_ACC_exti</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i.handle_ACC_exti))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handle_ACC_exti &rArr; IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection &rArr; LSM6DSL_ACC_Disable_Wake_Up_Detection &rArr; lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[16e]"></a>lsm303agr_acceleration_raw_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm303agr_reg.o(i.lsm303agr_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm303agr_acceleration_raw_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxesRaw
</UL>

<P><STRONG><a name="[17b]"></a>lsm303agr_mag_block_data_update_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_mag_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_mag_block_data_update_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Init
</UL>

<P><STRONG><a name="[17a]"></a>lsm303agr_mag_data_rate_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_mag_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_mag_data_rate_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetOutputDataRate
</UL>

<P><STRONG><a name="[17c]"></a>lsm303agr_mag_data_rate_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_mag_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_mag_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_SetOutputDataRate
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Init
</UL>

<P><STRONG><a name="[17e]"></a>lsm303agr_mag_device_id_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm303agr_reg.o(i.lsm303agr_mag_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm303agr_mag_device_id_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadID
</UL>

<P><STRONG><a name="[17f]"></a>lsm303agr_mag_i2c_interface_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_mag_i2c_interface_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_mag_i2c_interface_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_RegisterBusIO
</UL>

<P><STRONG><a name="[178]"></a>lsm303agr_mag_operating_mode_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_mag_operating_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_mag_operating_mode_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Enable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Disable
</UL>

<P><STRONG><a name="[17d]"></a>lsm303agr_mag_self_test_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_mag_self_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_mag_self_test_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Init
</UL>

<P><STRONG><a name="[179]"></a>lsm303agr_magnetic_raw_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm303agr_reg.o(i.lsm303agr_magnetic_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm303agr_magnetic_raw_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetAxesRaw
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetAxes
</UL>

<P><STRONG><a name="[1fe]"></a>lsm303agr_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm303agr_reg.o(i.lsm303agr_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_operating_mode_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_fifo_mode_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_device_id_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_block_data_update_set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_magnetic_raw_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_self_test_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_operating_mode_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_i2c_interface_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_device_id_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_data_rate_set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_data_rate_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_block_data_update_set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_acceleration_raw_get
</UL>

<P><STRONG><a name="[176]"></a>lsm303agr_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm303agr_reg.o(i.lsm303agr_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm303agr_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Write_Reg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_full_scale_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_fifo_mode_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_data_rate_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_xl_block_data_update_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_self_test_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_operating_mode_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_i2c_interface_set
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_data_rate_set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_mag_block_data_update_set
</UL>

<P><STRONG><a name="[171]"></a>lsm303agr_xl_block_data_update_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_xl_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_xl_block_data_update_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Init
</UL>

<P><STRONG><a name="[16a]"></a>lsm303agr_xl_data_rate_get</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_xl_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_xl_data_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetOutputDataRate
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Disable
</UL>

<P><STRONG><a name="[16b]"></a>lsm303agr_xl_data_rate_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_xl_data_rate_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_SetOutputDataRate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Enable
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Disable
</UL>

<P><STRONG><a name="[174]"></a>lsm303agr_xl_device_id_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm303agr_reg.o(i.lsm303agr_xl_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm303agr_xl_device_id_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadID
</UL>

<P><STRONG><a name="[172]"></a>lsm303agr_xl_fifo_mode_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_xl_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_xl_fifo_mode_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Init
</UL>

<P><STRONG><a name="[16f]"></a>lsm303agr_xl_full_scale_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_xl_full_scale_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_xl_full_scale_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetSensitivity
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetFullScale
</UL>

<P><STRONG><a name="[173]"></a>lsm303agr_xl_full_scale_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_reg.o(i.lsm303agr_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm303agr_xl_full_scale_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_write_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_SetFullScale
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Init
</UL>

<P><STRONG><a name="[16d]"></a>lsm303agr_xl_operating_mode_get</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lsm303agr_reg.o(i.lsm303agr_xl_operating_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm303agr_xl_operating_mode_get &rArr; lsm303agr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm303agr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetSensitivity
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetOutputDataRate
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetAxesRaw
</UL>

<P><STRONG><a name="[189]"></a>lsm6dsl_acceleration_raw_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dsl_acceleration_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetAxesRaw
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetAxes
</UL>

<P><STRONG><a name="[18f]"></a>lsm6dsl_angular_rate_raw_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_angular_rate_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dsl_angular_rate_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetAxesRaw
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetAxes
</UL>

<P><STRONG><a name="[193]"></a>lsm6dsl_auto_increment_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_auto_increment_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_auto_increment_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
</UL>

<P><STRONG><a name="[194]"></a>lsm6dsl_block_data_update_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_block_data_update_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
</UL>

<P><STRONG><a name="[196]"></a>lsm6dsl_device_id_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dsl_device_id_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ReadID
</UL>

<P><STRONG><a name="[195]"></a>lsm6dsl_fifo_mode_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_fifo_mode_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
</UL>

<P><STRONG><a name="[18d]"></a>lsm6dsl_gy_data_rate_get</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_gy_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_gy_data_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetOutputDataRate
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_Disable
</UL>

<P><STRONG><a name="[18e]"></a>lsm6dsl_gy_data_rate_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_Enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_Disable
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_SetOutputDataRate_When_Enabled
</UL>

<P><STRONG><a name="[190]"></a>lsm6dsl_gy_full_scale_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_gy_full_scale_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_gy_full_scale_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetSensitivity
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_GetFullScale
</UL>

<P><STRONG><a name="[191]"></a>lsm6dsl_gy_full_scale_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_gy_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_SetFullScale
</UL>

<P><STRONG><a name="[183]"></a>lsm6dsl_pin_int1_route_get</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int1_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lsm6dsl_pin_int1_route_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[184]"></a>lsm6dsl_pin_int1_route_set</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int1_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[185]"></a>lsm6dsl_pin_int2_route_get</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int2_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dsl_pin_int2_route_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[186]"></a>lsm6dsl_pin_int2_route_set</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int2_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lsm6dsl_pin_int2_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[1ff]"></a>lsm6dsl_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_get
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_dur_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_get
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_mode_set
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_device_id_get
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_auto_increment_set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_angular_rate_raw_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_acceleration_raw_get
</UL>

<P><STRONG><a name="[188]"></a>lsm6dsl_wkup_dur_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_wkup_dur_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_wkup_dur_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[187]"></a>lsm6dsl_wkup_threshold_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_wkup_threshold_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_wkup_threshold_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable_Wake_Up_Detection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[198]"></a>lsm6dsl_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsl_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_dur_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_mode_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_auto_increment_set
</UL>

<P><STRONG><a name="[181]"></a>lsm6dsl_xl_data_rate_get</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_xl_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_xl_data_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetOutputDataRate
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable
</UL>

<P><STRONG><a name="[182]"></a>lsm6dsl_xl_data_rate_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_xl_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_Disable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_SetOutputDataRate_When_Enabled
</UL>

<P><STRONG><a name="[18a]"></a>lsm6dsl_xl_full_scale_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_xl_full_scale_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_xl_full_scale_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetSensitivity
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GetFullScale
</UL>

<P><STRONG><a name="[18b]"></a>lsm6dsl_xl_full_scale_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_xl_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_SetFullScale
</UL>

<P><STRONG><a name="[50]"></a>main</STRONG> (Thumb, 1648 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = main &rArr; configRegion &rArr; sendFrameRCZ &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setScanStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readButton
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScanStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonarchScan
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM22_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MEMS_Process
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MEMS_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Enable_Wake_Up_Detection
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Disable_Wake_Up_Detection
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[207]"></a>pn9_next</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_api.o(i.pn9_next))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn9_next_byte
</UL>

<P><STRONG><a name="[206]"></a>pn9_next_byte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_api.o(i.pn9_next_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pn9_next_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn9_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
</UL>

<P><STRONG><a name="[203]"></a>readButton</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.readButton))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>sendFrameRCZ</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, monarch_app.o(i.sendFrameRCZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = sendFrameRCZ &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; RF_API_wait_frame &rArr; ST_MCU_API_WaitForInterrupt &rArr; ST_RF_API_S2LP_IRQ_CB &rArr; ST_MONARCH_API_AFTHR_GPIO_CB &rArr; NextFrequencyRequest &rArr; RF_API_change_frequency &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configRegion
</UL>

<P><STRONG><a name="[1d1]"></a>setNIntermediateTimIrqFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(i.setNIntermediateTimIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>setNextRtcWakeUpFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.setNextRtcWakeUpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[1a1]"></a>setRtcInUseFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.setRtcInUseFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[1a8]"></a>setRtcInUseForCsFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.setRtcInUseForCsFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
</UL>

<P><STRONG><a name="[19f]"></a>setRtcIrqFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.setRtcIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
</UL>

<P><STRONG><a name="[1e8]"></a>setRtcPrescFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.setRtcPrescFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_TimerCalibration
</UL>

<P><STRONG><a name="[1ed]"></a>setS2lpIrqRaisedFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.setS2lpIrqRaisedFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_WaitForInterrupt
</UL>

<P><STRONG><a name="[204]"></a>setScanStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, monarch_app.o(i.setScanStatus))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[160]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[15f]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32l0xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[12b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[12e]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[12c]"></a>I2C_TransferConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[12a]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[12d]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[12f]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[57]"></a>SPI_DMAError</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[58]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[55]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[59]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[56]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[1df]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[145]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[1e1]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[14b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14e]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[151]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[14f]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[150]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[119]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[121]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32l0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[134]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1f8]"></a>_setBlockState</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nvm_api.o(i._setBlockState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _setBlockState &rArr; NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeRecordInternal
</UL>

<P><STRONG><a name="[1c1]"></a>_writeRecordInternal</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nvm_api.o(i._writeRecordInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _writeRecordInternal &rArr; _setBlockState &rArr; NVM_Write &rArr; FlashWrite &rArr; FlashErase &rArr; HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setBlockState
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_WriteRecord
</UL>

<P><STRONG><a name="[1ce]"></a>priv_ST_MANUF_CmdStrobe</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_api.o(i.priv_ST_MANUF_CmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = priv_ST_MANUF_CmdStrobe &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_SpiRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartTx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StartRx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_SetFifoLength
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_ReadFifo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rf_load_first_ramp_up
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
</UL>

<P><STRONG><a name="[1c4]"></a>priv_ST_MANUF_ReadRegisters</STRONG> (Thumb, 66 bytes, Stack size 280 bytes, rf_api.o(i.priv_ST_MANUF_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_SpiRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_ReadFifoStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_ReadFifo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_GetRSSI
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_monarch_rf_init
</UL>

<P><STRONG><a name="[208]"></a>priv_ST_MANUF_SpiRaw_Ramp</STRONG> (Thumb, 86 bytes, Stack size 104 bytes, rf_api.o(i.priv_ST_MANUF_SpiRaw_Ramp))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = priv_ST_MANUF_SpiRaw_Ramp &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_SpiRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_single_bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rf_load_first_ramp_up
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
</UL>

<P><STRONG><a name="[1ef]"></a>priv_ST_MANUF_Transmission_Tick</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, rf_api.o(i.priv_ST_MANUF_Transmission_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = priv_ST_MANUF_Transmission_Tick &rArr; priv_ST_MANUF_tx_rf_dbpsk_single_bit &rArr; priv_ST_MANUF_SpiRaw_Ramp &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pn9_next_byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_StopRxTx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_single_bit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_SpiRaw_Ramp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_S2LP_IRQ_CB
</UL>

<P><STRONG><a name="[1c5]"></a>priv_ST_MANUF_WriteRegisters</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, rf_api.o(i.priv_ST_MANUF_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = priv_ST_MANUF_WriteRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_SpiRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_RF_API_SetFifoLength
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_tx_rf_dbpsk_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_rf_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rx_monarch_rf_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_rf_load_first_ramp_up
</UL>

<P><STRONG><a name="[1cc]"></a>priv_ST_MANUF_rf_load_first_ramp_up</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rf_api.o(i.priv_ST_MANUF_rf_load_first_ramp_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = priv_ST_MANUF_rf_load_first_ramp_up &rArr; priv_ST_MANUF_SpiRaw_Ramp &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_SpiRaw_Ramp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_CmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
</UL>

<P><STRONG><a name="[1c9]"></a>priv_ST_MANUF_rx_monarch_rf_init</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, rf_api.o(i.priv_ST_MANUF_rx_monarch_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = priv_ST_MANUF_rx_monarch_rf_init &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[1c8]"></a>priv_ST_MANUF_rx_rf_init</STRONG> (Thumb, 492 bytes, Stack size 80 bytes, rf_api.o(i.priv_ST_MANUF_rx_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = priv_ST_MANUF_rx_rf_init &rArr; priv_ST_MANUF_WriteRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[1cb]"></a>priv_ST_MANUF_tx_rf_dbpsk_init</STRONG> (Thumb, 912 bytes, Stack size 64 bytes, rf_api.o(i.priv_ST_MANUF_tx_rf_dbpsk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = priv_ST_MANUF_tx_rf_dbpsk_init &rArr; priv_ST_MANUF_WriteRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_start_continuous_transmission
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
</UL>

<P><STRONG><a name="[209]"></a>priv_ST_MANUF_tx_rf_dbpsk_single_bit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rf_api.o(i.priv_ST_MANUF_tx_rf_dbpsk_single_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = priv_ST_MANUF_tx_rf_dbpsk_single_bit &rArr; priv_ST_MANUF_SpiRaw_Ramp &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_SpiRaw_Ramp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_Transmission_Tick
</UL>

<P><STRONG><a name="[1c7]"></a>priv_ST_MANUF_tx_rf_init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, rf_api.o(i.priv_ST_MANUF_tx_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = priv_ST_MANUF_tx_rf_init &rArr; priv_ST_MANUF_ReadRegisters &rArr; ST_MCU_API_SpiRaw &rArr; S2LPSpiRaw &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_WriteRegisters
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_ST_MANUF_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[11d]"></a>GetNumberOfPagesByBytes</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdk_utils_flash.o(i.GetNumberOfPagesByBytes))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[18c]"></a>LSM6DSL_ACC_SetOutputDataRate_When_Enabled</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_ACC_SetOutputDataRate_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_ACC_SetOutputDataRate_When_Enabled &rArr; lsm6dsl_xl_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_SetOutputDataRate
</UL>

<P><STRONG><a name="[192]"></a>LSM6DSL_GYRO_SetOutputDataRate_When_Enabled</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lsm6dsl.o(i.LSM6DSL_GYRO_SetOutputDataRate_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSL_GYRO_SetOutputDataRate_When_Enabled &rArr; lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GYRO_SetOutputDataRate
</UL>

<P><STRONG><a name="[63]"></a>ReadRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl.o(i.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(i.LSM6DSL_RegisterBusIO)
</UL>
<P><STRONG><a name="[64]"></a>WriteRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl.o(i.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(i.LSM6DSL_RegisterBusIO)
</UL>
<P><STRONG><a name="[5f]"></a>ReadAccRegWrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr.o(i.ReadAccRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadAccRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(i.LSM303AGR_ACC_RegisterBusIO)
</UL>
<P><STRONG><a name="[61]"></a>ReadMagRegWrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr.o(i.ReadMagRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadMagRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(i.LSM303AGR_MAG_RegisterBusIO)
</UL>
<P><STRONG><a name="[60]"></a>WriteAccRegWrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr.o(i.WriteAccRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteAccRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(i.LSM303AGR_ACC_RegisterBusIO)
</UL>
<P><STRONG><a name="[62]"></a>WriteMagRegWrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr.o(i.WriteMagRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteMagRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr.o(i.LSM303AGR_MAG_RegisterBusIO)
</UL>
<P><STRONG><a name="[167]"></a>LSM303AGR_ACC_0_Probe</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, iks01a2_motion_sensors.o(i.LSM303AGR_ACC_0_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_ACC_0_Probe &rArr; LSM303AGR_ACC_RegisterBusIO &rArr; LSM303AGR_ACC_Write_Reg &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_RegisterBusIO
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadID
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Init
</UL>

<P><STRONG><a name="[168]"></a>LSM303AGR_MAG_0_Probe</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, iks01a2_motion_sensors.o(i.LSM303AGR_MAG_0_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_MAG_0_Probe &rArr; LSM303AGR_MAG_RegisterBusIO &rArr; lsm303agr_mag_i2c_interface_set &rArr; lsm303agr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_RegisterBusIO
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadID
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Init
</UL>

<P><STRONG><a name="[166]"></a>LSM6DSL_0_Probe</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, iks01a2_motion_sensors.o(i.LSM6DSL_0_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_0_Probe &rArr; LSM6DSL_RegisterBusIO &rArr; LSM6DSL_Write_Reg &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_RegisterBusIO
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ReadID
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IKS01A2_MOTION_SENSOR_Init
</UL>

<P><STRONG><a name="[70]"></a>AddRoundKey</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[78]"></a>BlockCopy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_internal
</UL>

<P><STRONG><a name="[6f]"></a>Cipher</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt
</UL>

<P><STRONG><a name="[73]"></a>InvCipher</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_internal
</UL>

<P><STRONG><a name="[76]"></a>InvMixColumns</STRONG> (Thumb, 818 bytes, Stack size 52 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InvMixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[74]"></a>InvShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[75]"></a>InvSubBytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[69]"></a>KeyExpansion_dec</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyExpansion_dec &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_internal
</UL>

<P><STRONG><a name="[6b]"></a>KeyExpansion_enc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyExpansion_enc &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt
</UL>

<P><STRONG><a name="[72]"></a>MixColumns</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[71]"></a>ShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[6d]"></a>SubBytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[79]"></a>XorWithIv</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XorWithIv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_internal
</UL>

<P><STRONG><a name="[6a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, retriever_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion_enc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion_dec
</UL>

<P><STRONG><a name="[6e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, retriever_api.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
</UL>

<P><STRONG><a name="[c4]"></a>HammingDist</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, monarch_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MONARCH_API_AFTHR_GPIO_CB
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_samples
</UL>

<P><STRONG><a name="[ba]"></a>[Anonymous Symbol]</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, monarch_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [Anonymous Symbol] &rArr; ST_MCU_API_GpioIRQ &rArr; S2LPIRQInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_MCU_API_GpioIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONARCH_API_timer_stop
</UL>

<P><STRONG><a name="[e6]"></a>SIGFOX_DECODE_dewhitening</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, sigfox_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIGFOX_DECODE_dewhitening
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_decode_frame
</UL>

<P><STRONG><a name="[1f7]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
